
```yaml
name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: starkbridge_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build shared package
      run: npm run build -w packages/shared
    
    - name: Lint
      run: npm run lint
    
    - name: Type check
      run: npm run type-check
    
    - name: Test backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5432/starkbridge_test
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test-secret
      run: |
        cd packages/backend
        npm run db:migrate
        npm test
    
    - name: Test frontend
      run: |
        cd packages/frontend
        npm test
    
    - name: Build backend
      run: npm run build -w packages/backend
    
    - name: Build frontend
      run: npm run build -w packages/frontend

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run security audit
      run: npm audit --audit-level high
    
    - name: Run dependency check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'starkbridge-pro'
        path: '.'
        format: 'ALL'

  deploy:
    needs: [test, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: Build and push Docker images
      run: |
        docker build -t ${{ secrets.ECR_REGISTRY }}/starkbridge-backend:${{ github.sha }} -f packages/backend/Dockerfile .
        docker build -t ${{ secrets.ECR_REGISTRY }}/starkbridge-frontend:${{ github.sha }} -f packages/frontend/Dockerfile .
        
        aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}
        
        docker push ${{ secrets.ECR_REGISTRY }}/starkbridge-backend:${{ github.sha }}
        docker push ${{ secrets.ECR_REGISTRY }}/starkbridge-frontend:${{ github.sha }}
    
    - name: Deploy to EKS
      run: |
        aws eks update-kubeconfig --region us-east-1 --name starkbridge-cluster
        
        # Update image tags
        kubectl set image deployment/backend backend=${{ secrets.ECR_REGISTRY }}/starkbridge-backend:${{ github.sha }} -n starkbridge-pro
        kubectl set image deployment/frontend frontend=${{ secrets.ECR_REGISTRY }}/starkbridge-frontend:${{ github.sha }} -n starkbridge-pro
        
        # Wait for rollout
        kubectl rollout status deployment/backend -n starkbridge-pro
        kubectl rollout status deployment/frontend -n starkbridge-pro